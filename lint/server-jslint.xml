<?xml version="1.0" encoding="utf-8"?>
<jslint>
<file name="src/djvu.js">
<issue line="20" char="12" reason="'DJVUJS' was used before it was defined." evidence="if (typeof DJVUJS === 'undefined') {"/>
<issue line="20" char="5" reason="Unexpected 'typeof'. Use '===' to compare directly with undefined." evidence="if (typeof DJVUJS === 'undefined') {"/>
<issue line="21" char="3" reason="Expected '(' at column 5, not column 3." evidence="  (typeof window !== 'undefined' ? window : this).DJVUJS = {};"/>
<issue line="21" char="11" reason="'window' was used before it was defined." evidence="  (typeof window !== 'undefined' ? window : this).DJVUJS = {};"/>
<issue line="21" char="4" reason="Unexpected 'typeof'. Use '===' to compare directly with undefined." evidence="  (typeof window !== 'undefined' ? window : this).DJVUJS = {};"/>
<issue line="21" char="36" reason="'window' was used before it was defined." evidence="  (typeof window !== 'undefined' ? window : this).DJVUJS = {};"/>
<issue line="33" char="3" reason="Expected 'use strict' at column 5, not column 3." evidence="  'use strict';"/>
<issue line="31" char="27" reason="Empty block." evidence="(function djvujsWrapper() {"/>
<issue line="37" char="3" reason="Unexpected '.'." evidence="}).call((typeof window === 'undefined') ? this : window);"/>
<issue line="37" char="17" reason="'window' was used before it was defined." evidence="}).call((typeof window === 'undefined') ? this : window);"/>
<issue line="37" char="10" reason="Unexpected 'typeof'. Use '===' to compare directly with undefined." evidence="}).call((typeof window === 'undefined') ? this : window);"/>
<issue line="37" char="50" reason="'window' was used before it was defined." evidence="}).call((typeof window === 'undefined') ? this : window);"/>
</file>
<file name="src/error.js">
<issue line="1" char="1" reason="'DJVU' was used before it was defined." evidence="DJVU.error = {"/>
<issue line="2" char="3" reason="Expected 'incorrectInput' at column 5, not column 3." evidence="  incorrectInput: 'Incorrect input',"/>
<issue line="3" char="3" reason="Expected 'assertError' at column 5, not column 3." evidence="  assertError: 'Assert error'"/>
</file>
<file name="src/lib.js">
<issue line="2" char="3" reason="Missing 'use strict' statement." evidence="  while (array.length &gt; 0) {"/>
<issue line="3" char="7" reason="Expected 'array' at column 9, not column 7." evidence="      array.shift();"/>
<issue line="4" char="3" reason="Expected '}' at column 5, not column 3." evidence="  }"/>
<issue line="8" char="3" reason="Missing 'use strict' statement." evidence="  if (!value) {"/>
<issue line="9" char="5" reason="Expected 'throw' at column 9, not column 5." evidence="    throw error.assertError;"/>
<issue line="9" char="11" reason="'error' was used before it was defined." evidence="    throw error.assertError;"/>
<issue line="10" char="3" reason="Expected '}' at column 5, not column 3." evidence="  }"/>
<issue line="14" char="3" reason="Missing 'use strict' statement." evidence="  if (DEBUG) {"/>
<issue line="14" char="7" reason="'DEBUG' was used before it was defined." evidence="  if (DEBUG) {"/>
<issue line="15" char="5" reason="Expected 'console' at column 9, not column 5." evidence="    console.log.apply(console, arguments);"/>
<issue line="16" char="3" reason="Expected '}' at column 5, not column 3." evidence="  }"/>
</file>
<file name="src/jb2coder.js">
<issue line="1" char="1" reason="'define' was used before it was defined." evidence="define(['./zpcoder', './lib', './error'], function (zpcoder, lib, error) {"/>
<issue line="2" char="3" reason="Missing 'use strict' statement." evidence="  var JB2Decoder = function () {"/>
<issue line="3" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.imageSize = new zpcoder.ZPNumContext(0, 10);"/>
<issue line="4" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.matchingSymbolIndex = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="5" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.symbolColumnNumver = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="6" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.symbolRowNumber = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="7" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.sameLineColumnOffset = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="7" char="64" reason="Unexpected character '(space)'." evidence="    this.sameLineColumnOffset = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="8" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.sameLineRowOffset = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="9" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.newLineColumnOffset = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="10" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.newLineRowOffset = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="10" char="60" reason="Unexpected character '(space)'." evidence="    this.newLineRowOffset = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="11" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.commentLength = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="12" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.commentOctet = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="12" char="56" reason="Unexpected character '(space)'." evidence="    this.commentOctet = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="13" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.requiredDictionaySize = new zpcoder.ZPNumContext(0, 0);"/>
<issue line="14" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.recordType = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="14" char="54" reason="Unexpected character '(space)'." evidence="    this.recordType = new zpcoder.ZPNumContext(0, 0); "/>
<issue line="15" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.first = new JB2Rect(-1, 0, 0, 1);"/>
<issue line="15" char="22" reason="'JB2Rect' was used before it was defined." evidence="    this.first = new JB2Rect(-1, 0, 0, 1);"/>
<issue line="16" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.lineCounter = 0; "/>
<issue line="16" char="26" reason="Unexpected character '(space)'." evidence="    this.lineCounter = 0; "/>
<issue line="17" char="4" reason="Unexpected character '(space)'." evidence="    "/>
<issue line="18" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.reset = function () {"/>
<issue line="19" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.recordType.reset();"/>
<issue line="20" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.imageSize.reset();"/>
<issue line="21" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.matchingSymbolIndex.reset();"/>
<issue line="22" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.symbolColumnNumver.reset();"/>
<issue line="23" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.symbolRowNumber.reset();"/>
<issue line="24" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.sameLineRowOffset.reset();"/>
<issue line="25" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.sameLineColumnOffset.reset();"/>
<issue line="26" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.newLineRowOffset.reset();"/>
<issue line="27" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.newLineColumnOffset.reset();"/>
<issue line="28" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.commentOctet.reset();"/>
<issue line="29" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.commentLength.reset();"/>
<issue line="30" char="7" reason="Expected 'this' at column 17, not column 7." evidence="      this.requiredDictionaySize.reset();"/>
<issue line="31" char="5" reason="Expected '}' at column 13, not column 5." evidence="    };"/>
<issue line="32" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="34" char="3" reason="Expected 'var' at column 5, not column 3." evidence="  var JB2Rect = function (left, top, width, height) {"/>
<issue line="34" char="7" reason="Combine this with the previous 'var' statement." evidence="  var JB2Rect = function (left, top, width, height) {"/>
<issue line="35" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.left = left;"/>
<issue line="36" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.top = top;"/>
<issue line="37" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.width = top;"/>
<issue line="38" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.height = height;"/>
<issue line="39" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="34" char="38" reason="Unused 'width'." evidence="  var JB2Rect = function (left, top, width, height) {"/>
<issue line="41" char="3" reason="Expected 'return' at column 5, not column 3." evidence="  return {"/>
<issue line="42" char="5" reason="Expected 'JB2Decoder' at column 9, not column 5." evidence="    JB2Decoder: JB2Decoder,"/>
<issue line="43" char="5" reason="Expected 'JB2Rect' at column 9, not column 5." evidence="    JB2Rect: JB2Rect"/>
<issue line="44" char="3" reason="Expected '}' at column 5, not column 3." evidence="  };"/>
<issue line="44" char="3" reason="Too many errors. (95% scanned)." evidence=""/>
</file>
<file name="src/main.js">
<issue line="7" char="3" reason="Missing 'use strict' statement." evidence="  this.downloadPage = function (pageNumber, callback) {"/>
<issue line="8" char="5" reason="Expected 'lib' at column 13, not column 5." evidence="    lib.log('loading page: ' + pageNumber + 'from' + this.manifest.files.length);"/>
<issue line="10" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var left = parseInt(this.manifest.files[pageNumber].offset);"/>
<issue line="10" char="16" reason="Missing radix parameter." evidence="    var left = parseInt(this.manifest.files[pageNumber].offset);"/>
<issue line="11" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var size = parseInt(this.manifest.files[pageNumber].size);"/>
<issue line="11" char="9" reason="Combine this with the previous 'var' statement." evidence="    var size = parseInt(this.manifest.files[pageNumber].size);"/>
<issue line="11" char="16" reason="Missing radix parameter." evidence="    var size = parseInt(this.manifest.files[pageNumber].size);"/>
<issue line="12" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var right = left + size - 1;"/>
<issue line="12" char="9" reason="Combine this with the previous 'var' statement." evidence="    var right = left + size - 1;"/>
<issue line="14" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var filePreload = new XMLHttpRequest();"/>
<issue line="14" char="9" reason="Combine this with the previous 'var' statement." evidence="    var filePreload = new XMLHttpRequest();"/>
<issue line="14" char="27" reason="'XMLHttpRequest' was used before it was defined." evidence="    var filePreload = new XMLHttpRequest();"/>
<issue line="15" char="5" reason="Expected 'filePreload' at column 13, not column 5." evidence="    filePreload.open(&quot;GET&quot;, config.url, true);"/>
<issue line="16" char="5" reason="Expected 'filePreload' at column 13, not column 5." evidence="    filePreload.setRequestHeader(&quot;Range&quot;, &quot;bytes=&quot; + left + &quot;-&quot; + right);"/>
<issue line="17" char="5" reason="Expected 'filePreload' at column 13, not column 5." evidence="    filePreload.responseType = &quot;arraybuffer&quot;;"/>
<issue line="18" char="5" reason="Expected 'filePreload' at column 13, not column 5." evidence="    filePreload.onload = function () {"/>
<issue line="19" char="7" reason="Expected 'var' at column 17, not column 7." evidence="      var arrayBuffer = filePreload.response;"/>
<issue line="20" char="7" reason="Expected 'var' at column 17, not column 7." evidence="      var byteArray = arrayBuffer.byteLength ? new Uint8Array(arrayBuffer) : arrayBuffer;"/>
<issue line="20" char="11" reason="Combine this with the previous 'var' statement." evidence="      var byteArray = arrayBuffer.byteLength ? new Uint8Array(arrayBuffer) : arrayBuffer;"/>
<issue line="20" char="52" reason="'Uint8Array' was used before it was defined." evidence="      var byteArray = arrayBuffer.byteLength ? new Uint8Array(arrayBuffer) : arrayBuffer;"/>
<issue line="21" char="7" reason="Expected 'callback' at column 17, not column 7." evidence="      callback(byteArray);"/>
<issue line="22" char="5" reason="Expected '}' at column 13, not column 5." evidence="    };"/>
<issue line="23" char="5" reason="Expected 'filePreload' at column 13, not column 5." evidence="    filePreload.send();"/>
<issue line="24" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="26" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.manifest = manifest;"/>
<issue line="27" char="1" reason="Expected '}' at column 5, not column 1." evidence="};"/>
<issue line="34" char="3" reason="Missing 'use strict' statement." evidence="  this.getc = function () {"/>
<issue line="35" char="5" reason="Expected 'return' at column 13, not column 5." evidence="    return this.data[this.pointer++];"/>
<issue line="35" char="34" reason="Unexpected '++'." evidence="    return this.data[this.pointer++];"/>
<issue line="36" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="38" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.readFourByte = function () {"/>
<issue line="39" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var result = this.getc() &lt;&lt; 24;"/>
<issue line="39" char="30" reason="Unexpected '&amp;lt;&amp;lt;'." evidence="    var result = this.getc() &lt;&lt; 24;"/>
<issue line="40" char="5" reason="Expected 'result' at column 13, not column 5." evidence="    result |= this.getc() &lt;&lt; 16;"/>
<issue line="40" char="12" reason="Unexpected '|='." evidence="    result |= this.getc() &lt;&lt; 16;"/>
<issue line="40" char="27" reason="Unexpected '&amp;lt;&amp;lt;'." evidence="    result |= this.getc() &lt;&lt; 16;"/>
<issue line="41" char="5" reason="Expected 'result' at column 13, not column 5." evidence="    result |= this.getc() &lt;&lt; 8;"/>
<issue line="41" char="12" reason="Unexpected '|='." evidence="    result |= this.getc() &lt;&lt; 8;"/>
<issue line="41" char="27" reason="Unexpected '&amp;lt;&amp;lt;'." evidence="    result |= this.getc() &lt;&lt; 8;"/>
<issue line="42" char="5" reason="Expected 'result' at column 13, not column 5." evidence="    result |= this.getc();"/>
<issue line="42" char="12" reason="Unexpected '|='." evidence="    result |= this.getc();"/>
<issue line="43" char="5" reason="Expected 'return' at column 13, not column 5." evidence="    return result;"/>
<issue line="44" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="46" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.skipInChunk = function (chunk, length) {"/>
<issue line="47" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var current = chunk;"/>
<issue line="48" char="5" reason="Expected 'while' at column 13, not column 5." evidence="    while (current) {"/>
<issue line="49" char="7" reason="Expected 'current' at column 17, not column 7." evidence="      current.skipped += length;"/>
<issue line="50" char="7" reason="Expected 'current' at column 17, not column 7." evidence="      current = chunk.parent;"/>
<issue line="51" char="5" reason="Expected '}' at column 13, not column 5." evidence="    }"/>
<issue line="52" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="52" char="3" reason="Too many errors. (41% scanned)." evidence=""/>
</file>
<file name="src/zpcoder.js">
<issue line="7" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.setInterval = function (newMin, newMax) {"/>
<issue line="8" char="5" reason="Expected 'if' at column 13, not column 5." evidence="    if (newMin &gt; newMax) {"/>
<issue line="9" char="7" reason="Expected 'throw' at column 17, not column 7." evidence="      throw error.incorrectInput;"/>
<issue line="9" char="13" reason="'error' was used before it was defined." evidence="      throw error.incorrectInput;"/>
<issue line="10" char="5" reason="Expected '}' at column 13, not column 5." evidence="    }"/>
<issue line="12" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.min = newMin;"/>
<issue line="13" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.max = newMax;"/>
<issue line="14" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="16" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.reset = function () {"/>
<issue line="17" char="5" reason="Expected 'clearArray' at column 13, not column 5." evidence="    clearArray(this.nodes);"/>
<issue line="18" char="5" reason="Expected 'clearArray' at column 13, not column 5." evidence="    clearArray(left);"/>
<issue line="18" char="16" reason="'left' was used before it was defined." evidence="    clearArray(left);"/>
<issue line="19" char="5" reason="Expected 'clearArray' at column 13, not column 5." evidence="    clearArray(right);"/>
<issue line="19" char="16" reason="'right' was used before it was defined." evidence="    clearArray(right);"/>
<issue line="20" char="5" reason="Expected 'init' at column 13, not column 5." evidence="    init();"/>
<issue line="21" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="23" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.nodes = [];"/>
<issue line="24" char="3" reason="Expected 'var' at column 9, not column 3." evidence="  var n;"/>
<issue line="25" char="3" reason="Expected 'var' at column 9, not column 3." evidence="  var allocated;"/>
<issue line="25" char="7" reason="Combine this with the previous 'var' statement." evidence="  var allocated;"/>
<issue line="26" char="3" reason="Expected 'var' at column 9, not column 3." evidence="  var left = [];"/>
<issue line="26" char="7" reason="Combine this with the previous 'var' statement." evidence="  var left = [];"/>
<issue line="27" char="3" reason="Expected 'var' at column 9, not column 3." evidence="  var right = [];"/>
<issue line="27" char="7" reason="Combine this with the previous 'var' statement." evidence="  var right = [];"/>
<issue line="29" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.newNode = function () {"/>
<issue line="30" char="5" reason="Expected 'this' at column 13, not column 5." evidence="    this.nodes[n] = { value: 0 };"/>
<issue line="31" char="5" reason="Expected 'left' at column 13, not column 5." evidence="    left[n] = 0;"/>
<issue line="32" char="5" reason="Expected 'right' at column 13, not column 5." evidence="    right[n] = 0;"/>
<issue line="33" char="5" reason="Expected 'return' at column 13, not column 5." evidence="    return n++;"/>
<issue line="33" char="13" reason="Unexpected '++'." evidence="    return n++;"/>
<issue line="34" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="36" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.getLeft = function (i) {"/>
<issue line="37" char="5" reason="Expected 'if' at column 13, not column 5." evidence="    if (i &gt;= n) {"/>
<issue line="38" char="7" reason="Expected 'throw' at column 17, not column 7." evidence="      throw error.incorrectInput;"/>
<issue line="38" char="13" reason="'error' was used before it was defined." evidence="      throw error.incorrectInput;"/>
<issue line="39" char="5" reason="Expected '}' at column 13, not column 5." evidence="    }"/>
<issue line="41" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var result = left[i];"/>
<issue line="42" char="5" reason="Expected 'if' at column 13, not column 5." evidence="    if (result) {"/>
<issue line="43" char="7" reason="Expected 'return' at column 17, not column 7." evidence="      return result;"/>
<issue line="44" char="5" reason="Expected '}' at column 13, not column 5." evidence="    }"/>
<issue line="46" char="5" reason="Expected 'result' at column 13, not column 5." evidence="    result = this.newNode();"/>
<issue line="47" char="5" reason="Expected 'left' at column 13, not column 5." evidence="    left[i] = result;"/>
<issue line="48" char="5" reason="Expected 'return' at column 13, not column 5." evidence="    return result;"/>
<issue line="49" char="3" reason="Expected '}' at column 9, not column 3." evidence="  };"/>
<issue line="51" char="3" reason="Expected 'this' at column 9, not column 3." evidence="  this.getRight = function (i) {"/>
<issue line="52" char="5" reason="Expected 'if' at column 13, not column 5." evidence="    if (i &gt;= n) {"/>
<issue line="53" char="7" reason="Expected 'throw' at column 17, not column 7." evidence="      throw  error.incorrectInput;"/>
<issue line="53" char="14" reason="Expected exactly one space between 'throw' and 'error'." evidence="      throw  error.incorrectInput;"/>
<issue line="54" char="5" reason="Expected '}' at column 13, not column 5." evidence="    }"/>
<issue line="56" char="5" reason="Expected 'var' at column 13, not column 5." evidence="    var result = right[i];"/>
<issue line="56" char="5" reason="Too many errors. (15% scanned)." evidence=""/>
</file>
</jslint>